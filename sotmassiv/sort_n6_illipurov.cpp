/*В файле содержится двумерный массив размерностью n × n. В новый файл вывести отсортированный массив.
6. Четные столбцы по убыванию, нечетные по возрастанию с помощью сортировки сортировки Шелла с шагом d = N/2^i.*/
#include <iostream>  
#include <vector>    
#include <string>    
#include <fstream>  
#include <algorithm> 
using namespace std;

ifstream in("input.txt");        //ввод данных из файла
ofstream out("output_6.txt"); //вывод данных в файл

vector<vector<int>> inFile(int n)
{                             // заполнение массива данными из файла
    in >> n;                  
    vector<vector<int>> x(n); // обЪявление вектра векторов заданной размерности
    for (int i = 0; i < n; i++)
    {                               // проход по строкам, по внешнему вектору
        x[i].resize(n);             // определение размерности вектора текущей строки
        for (int j = 0; j < n; j++) // проход по столбцам в строке
            in >> x[i][j];          // заполняем текущий элемент
    }
    return x; // возвращаем заполненный массив
}

void outFile(vector<vector<int>> &x)
{                     // вывод массива в файл
    int n = x.size(); // определение размерности массива
    for (int i = 0; i < n; i++)
    {                               // проход по строкам
        for (int j = 0; j < n; j++) // проход по столбцам в строке
            out << x[i][j] << "\t"; // вывод текущего элемента
        out << endl;                // переход на новую строку
    }
}

void sortirovka_shell_2(vector<vector<int>> &x)
{                     // сортировка Шелла с шагом N/(2^i)
    int n = x.size(); // определение размерности массива
    for (int j = 0; j < n; j++)
    {                     // проход по столбцам
        int step = n / 2; // начальный шаг
        while (step > 0)
        {
            for (int i = 0; i < (n - step); i++)
            { // проход по первой части индексов элементов массива
                int k = i;
                if (j % 2 == 0)
                { // если столбец четный, сортировка по убыванию
                    while (k >= 0 && x[k][j] > x[k + step][j])
                    {                                  // сортировка по убыванию
                        swap(x[k][j], x[k + step][j]); // меняем местами
                        k--;                           // пока возможно уменьшаем индексы сравниваемых элементов
                    }
                }
                else
                { // если столбец нечетный, сортировка по возрастанию
                    while (k >= 0 && x[k][j] < x[k + step][j])
                    {                                  // сортировка по возрастанию
                        swap(x[k][j], x[k + step][j]); // меняем местами элементы
                        k--;                           // пока возможно уменьшаем индексы сравниваемых элементов
                    }
                }
            }
            step = step / 2; // переопределение шаг
        }
    }
}

int main()
{
    int n;                 // инициализация переменной размерности массива
    vector<vector<int>> x; // обЪявление вектора векторов исходного
    x = inFile(n);         // ввод данных из файла
    sortirovka_shell_2(x); // вызов функции сортировки массива согласно условиям задачи
    outFile(x);            // вывод полученных данных в файл
}